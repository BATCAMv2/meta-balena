#!/bin/sh
# shellcheck disable=SC2039
# Busybox ash has a local built-in

# Copyright 2019 Balena Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Wait for a file to appear with loop count limit.
# Use-case example: wait for udev to create a filesystem symlink.
# Arguments:
#   1 - target path
#   2 - number of loops (each loop sleeps for 100ms)
wait4file() {
	_lpath="$1"
	_lloops="$2"

	while [ ! -e "$_lpath" ]; do
		if [ "$_lloops" -gt 0 ]; then
			sleep 0.1
			_lloops=$((_lloops-1))
		else
			return 1
		fi
	done
	return 0
}

# Output the UUID for the specified block device.
# Arguments:
#   1 - Target block device
get_dev_uuid() {
	lsblk -nlo uuid "${1}"
}

# Output the filesystem label for the specified block device.
# Arguments:
#   1 - Target block device
get_dev_label() {
	lsblk -nlo label "${1}"
}

# Output the device name for the specified file system label.
# Arguments:
#   1 - Filesystem label
get_dev_path_from_label() {
	dev=$(lsblk -nlo name,label | grep "$1" | cut -d ' ' -f1)
	echo "/dev/$dev"
}

# Returns the UUID set in cmdline for root
# Returns:
#   0 - root UUID found in cmdline (prints the matching uuid to stdout)
#   1 - root uuid is not present in cmdline
get_cmdline_root_uuid() {
	CMDLINE="/proc/cmdline"
	# shellcheck disable=SC2013
	for p in $(cat "$CMDLINE"); do
		opt="$(echo "$p" | cut -d'=' -f1)"
		if [ "$opt" = "root" ]; then
			opt="$(echo "$p" | cut -d'=' -f2)"
			if [ "$opt" = "UUID" ]; then
				echo "$p" | cut -d'=' -f3
				return 0
			elif [ "$opt" = "LABEL" ]; then
				label=$(echo "$p" | cut -d'=' -f3)
				get_dev_uuid "$(get_dev_path_from_label "${label}")"
				return 0
			fi
		fi
	done
	return 1
}

# Returns the udev symlink path for a label.
# Argument:
#  1 - label
# Returns:
#  by-state symlink udev path
get_state_path_from_label() {
	[ -z "$1" ] && return 1
	[ -L "/dev/disk/by-state/${1}" ] && echo "/dev/disk/by-state/${1}" && return 0
	[ -L "/dev/disk/by-label/${1}" ] && echo "/dev/disk/by-label/${1}" && return 0
	[ -L "/dev/disk/by-partlabel/${1}" ] && echo "/dev/disk/by-partlabel/${1}" && return 0
	return 1
}

# Output the filesystem type for the specified block device.
# Arguments:
#   1 - Target block device
get_dev_fstype() {
	lsblk -nlo fstype "${1}"
}

# Mount/unmount device to update mount time
# Arguments
#  1 - Target device
update_mounttime() {
    mkdir -p /run
    tmpdir=$(mktemp -d -p /run)
    mount "$1" "${tmpdir}"
    umount "${tmpdir}"
}

# Set a Balena filesystem UUID to the specified device.
# Arguments:
#   1 - Target block device
#   2 - Filesystem type
# Returns:
#   0 - Success, new UUID in stdout
#   1 - Failure
regenerate_uuid() {
    dev=$1
    # Filesystem type specific quirks
    fstype=$2
    case $fstype in
        vfat)
            # mlabel doesn't work on file directly. It needs a drive to file
            # mapping in its configuration.
            drive=a:
	    echo "drive ${drive} file=\"$dev\" exclusive" > /etc/mtools.conf
            new_uuid="BDEF$(hexdump -n 2 -e '"%02X" 1 "\n"' /dev/urandom)"
            cmd="mlabel -s -N ${new_uuid}"
            if ! eval "${cmd}" "${drive}"; then
                return 1
            fi
            ;;
        ext*)
            # tune2fs refuses to work when the filesystem was not
            # freshly checked.
            # Remount to update lastmount time to current time
            # Otherwise in systems with no RTC lastmount could be in the future
            # and e2fsck does not update the last filesystem check time
            if [ -e /etc/e2fsck.conf ] && grep broken_system_clock /etc/e2fsck.conf > /dev/null; then
                broken_system_clock=$(grep broken_system_clock /etc/e2fsck.conf | cut -d "=" -f2)
                    if [ "${broken_system_clock}" = "1" ]; then
                        update_mounttime "$dev"
                    fi
            fi
            if ! e2fsck -fp "$dev"; then
		return 1
            fi
	    new_uuid=$(sed 's/^[^-]*/ba1eadef/' < /proc/sys/kernel/random/uuid)
            cmd="echo y | EXT2FS_NO_MTAB_OK=1  tune2fs -U ${new_uuid}"
            if ! eval "${cmd}" "${dev}"; then
                return 1
            fi
            ;;
        *) ;;
        esac

    new_uuid="$(get_dev_uuid "$dev")"
    echo "${new_uuid}"
    return 0
}

# Verify the checksum of a given file
# Arguments:
#   1 - File to check (e.g config.json)
#   2 - Target md5 checksum
# Returns:
#   0 - Success
#   1 - Failure
verify_cksum() {
	tf=$(readlink -f "${1}")
	tmd5="${2}"

	[ ! -e "${tf}" ] && return 1
	md5=$(md5sum "${tf}" | cut -d " " -f1)
	if [ "${md5}" != "${tmd5}" ]; then
		return 1
	fi
	return 0
}

# Verify file integrity for given file
# Used on filesystems with non-atomic renames as FAT
# Looks for a <filename>.<hash>.md5sum backup file
# Arguments:
#   1 - File to check (e.g config.json)
# Returns:
#   0 - Success
integrity_check() { 
	local target
	local fname
	local tdir
	local md5

	target=$(readlink -f "${1}")
	fname=$(basename "${target}")
	tdir=$(dirname "${target}")

	md5=$(find "${tdir}" -name "${fname}.[a-z0-9]*.md5sum" -print0 | xargs -I {} basename {} | awk -F '.' '{print $(NF-1);}')
	if [ -n "${md5}" ]; then
		local md5fn="${tdir}/${fname}.${md5}.md5sum"
		if [ -e "${md5fn}" ]; then
			# Verify integrity of checksum file
			if verify_cksum "${md5fn}" "${md5}"; then
				# Avoid writting the same file
				if ! verify_cksum "${target}" "${md5}"; then
					# Make a temporary copy so the source remains intact
					install "${md5fn}" "${md5fn}.tmp" && sync
					mv "${md5fn}.tmp" "${target}"
				fi
			fi
		fi
	fi
	# Make sure there is no dangling backup file
	rm -rf "${tdir}"/"${fname}"*md5sum*
	return 0
}

# Safe file writes by backing up and checksuming before renaming
# Used on filesystems with non-atomic renames as FAT
# Arguments:
#   1 - Source file (e.g /tmp/config.json)
#   2 - Target file (e.g /mnt/boot/config.json)
# Returns:
#   0 - Success
#   1 - Failure
safe_modify() {
	[ ! -e "${1}" ] && echo "Not found ${1}" && return 1
	[ ! -e "$(dirname "${2}")" ] && echo "Does not exist $(dirname "${2}")" && return 1
	local source
	local target
	local tname
	local tdir
	local md5
	local md5f
	source="$(readlink -f "${1}")"
	target="$(readlink -f "${2}")"
	tname=$(basename "${target}")
	tdir=$(dirname "${target}")

	if ! integrity_check "${source}"; then
		return 1
	fi

	md5=$(md5sum "${source}" | cut -d ' ' -f1)
	if [ -n "${md5}" ]; then
		md5f="${tdir}/${tname}.${md5}.md5sum"
		install "${source}" "${md5f}" && sync
		if ! verify_cksum "${md5f}" "${md5}"; then
			return 1
		fi
		# Used only by external test frameworks
		# shellcheck disable=SC2154
		[ "${testmode}" = "1" ] && return 0
		mv "${source}" "${tdir}/${tname}" && sync
		if verify_cksum "${tdir}/${tname}" "${md5}"; then
			rm -f "${md5f}" && sync
			return 0
		fi
	fi
	return 1
}
